
from Tkinter import *

# the room class
class Room(object):
    # the constructor
    def __init__(self, name):

        self.name = name       
        self.storys = {}
        self.options_1s = {}
        self.options_2s = {}
        self.options_3s = {}
# getters and setters for the instance variables
    @property
    def name(self):
        return self._name
    @name.setter
    def name(self, value):
        self._name = value
    @property
    def storys(self):
        return self._storys
    @storys.setter
    def storys(self, value):
        self._storys = value
    @property
    def options_1s(self):
        return self._options_1s
    @options_1s.setter
    def options_1s(self, value):
        self._options_1s = value
    @property
    def options_2s(self):
        return self._options_2s
    @options_2s.setter
    def options_2s(self, value):
        self._options_2s = value
    @property
    def options_3s(self):
        return self._options_3s
    @options_3s.setter
    def options_3s(self, value):
        self._options_3s = value

   
#
    def addstory(self,story,desc):
        self._storys[story] = desc
#
#
    def addoptions_1(self,options_1 , desc):
        self._options_1s[options_1] = desc
    def addoptions_2(self,options_2 , desc):
        self._options_2s[options_2] = desc
    def addoptions_3(self,options_3 , desc):
        self._options_3s[options_3] = desc
# returns a string description of the room
    def __str__(self):
# first, the room name
        #s = " {}\n".format(self.name)
        #can use this to kkep track of the level we are on 
    
        s = ""
# next, the items in the story
       # s += "You see: "
        for story in self.storys.keys():
            s += "{}\n".format(story)
        for options_1  in self.options_1s.keys():
            s += options_1 
        for options_2  in self.options_2s.keys():
            s += options_2 
        for options_3  in self.options_3s.keys():
            s += options_3 
        s += "\n"

        return s
# the game class
# inherits from the Frame class of Tkinter
###Need to change this one for story over game/room but just getting this out there 
class Game(Frame):
# the constructor
    def __init__(self, parent):
# call the constructor in the superclass
        Frame.__init__(self, parent)
# creates the rooms
    def createRooms(self):
        # r1 through r4 are the four rooms in the mansion
# currentRoom is the room the player is currently in (which
# can be one of r1 through r4)
# create the rooms and give them meaningful names and an
# image in the current directory
        r1 = Room("level 1")
        # can use this to keep track of the levels ans groups of teh qustions 
        r1.addstory("You are ......","1")
        r1.addoptions_1("you ask.....","A:")
        r1.addoptions_2( "You walk on by ....","B:")
        r1.addoptions_3("you save the person","C:")
# game
        Game.currentRoom = r1
# initialize the player's inventory
        Game.inventory = []


# sets up the GUI
    def setupGUI(self):
        # organize the GUI
        self.pack(fill=BOTH, expand=1)
        # the widget is a Tkinter Entry
# set its background to white and bind the return key to the
# function process in the class
# push it to the bottom of the GUI and let it fill
# horizontally
# give it focus so the player doesn't have to click on it
        Game.player_input = Entry(bg="white")
        Game.player_input.bind("<Return>", self.process)
        Game.player_input.pack(side=BOTTOM, fill=X)
        #Game.player_input.focus()

        
       
# first, the frame in which the text will be placed
        text_frame = Frame(self, width=WIDTH )
# the widget is a Tkinter Text
# disable it by default
# don't let the widget control the frame's size
        Game.text = Text(bg="lightgrey", state=DISABLED)
        Game.text.pack(fill=Y, expand=1)
        text_frame.pack(side=TOP, fill=X)
        text_frame.pack_propagate(False)

# setup the player input at the bottom of the GUI


# sets the status displayed on the right of the GUI
    def setStatus(self, status):
        # enable the text widget, clear it, set it, and disabled it
        Game.text.config(state=NORMAL)
        Game.text.delete("1.0", END)
        
# otherwise, display the appropriate status
        Game.text.insert(END, str(Game.currentRoom)  +"\n \n" + status)
        Game.text.config(state=DISABLED)
# play the game
    def play(self):
# add the rooms to the game
        self.createRooms()
# configure the GUI
        self.setupGUI()

     
# set the current status
        self.setStatus("")

#we do not nned this but i wanted to keep it here just in case we need it later and we can exit the game this way 
###############################################################################################################################################################
# processes the player's input
    def process(self, event):
# grab the player's input from the input at the bottom of
# the GUI
        action = Game.player_input.get()
# set the user's input to lowercase to make it easier to
# compare the verb and noun to known values
        action = action.lower()
# set a default response
        response = "I don't understand. Try verb noun. Valid verbs are go, look, use and take"
# if the player is dead if goes/went south from room 4
        if (Game.currentRoom == None):
# clear the player's input
            Game.player_input.delete(0, END)
            return
# exit the game if the player wants to leave (supports quit,exit, and bye)
        if (action  == "quit" or action   == "exit" or action  == "bye" or action  == "sionara!"):
                exit (0)
# split the user input into words (words are separated by spaces) and store the words in a list the game only understands two word inputs
        words = action.split()
        if (len(words) == 2  ):
# isolate the verb and noun
            verb = words[0]
            noun = words[1]
# the verb is: go
            if (verb == "go"):
# set a default response
                response = "Invalid exit."
# check for valid exits in the current room
                if (noun in Game.currentRoom.exits):
# if one is found, change the current room to the one that is associated with the specified exit
                    Game.currentRoom = Game.currentRoom.exits[noun]
            # set the response (success)
                response = "Room changed."
# the verb is: look
            elif (verb == "look"):
# set a default response
                response = "I don't see that item."
# check for valid items in the current room
                if (noun in Game.currentRoom.items):
# if one is found, set the response to the item's description
                    response = Game.currentRoom.items[noun]
# the verb is: take
            elif (verb == "take"):
# set a default response
                response = "I don't see that item."
# check for valid grabbable items in the current room
                for grabbable in Game.currentRoom.grabbables:
# a valid grabbable item is found
                    if (noun == grabbable):
# add the grabbable item to the player's inventory
                        Game.inventory.append(grabbable)
                    # remove the grabbable item from the room
                        Game.currentRoom.delGrabbable(grabbable)
# set the response (success)
                        response = "Item grabbed."
# no need to check any more grabbable items
                        break 
            elif (verb == "use"):
                response = "You can not use  that here ";
                for usable in Game.currentRoom.usable:
            # a valid grabbable item is found
                    if (noun == usable and usable == "key"):
                        Game.inventory.remove("key");
                        response = "safe is unlooked and you  took the spellbook from inside " ;
                        Game.inventory.append("book")

                    elif (noun == usable and usable == "book"):
                        Game.inventory.remove("book");
                        response = ("The books turned to dust and the bookshelf moved aside to revell a message saying you have win! To end type in bye ");
                        break 

                    elif (noun == usable):
                   # remove the usable item from inventory 
                        Game.inventory.remove(grabbable);
                # set the response (success)
                        response = "Item used .";
###########################################################################################################################################################################
                        
# display the response on the right of the GUI
# display the room's image on the left of the GUI
# clear the player's input
        self.setStatus(response)
        self.setRoomImage()
        Game.player_input.delete(0, END)
##########################################################
# the default size of the GUI is 800x600
WIDTH = 800
HEIGHT = 600
# create the window
window = Tk()
window.title("Room Adventure")
# create the GUI as a Tkinter canvas inside the window
g = Game(window)
# play the game
g.play()
# wait for the window to close
window.mainloop()

