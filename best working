############################################################################################
# Name: group 4 
# Date: 
# Description: 
###########################################################################################
from Tkinter import *
from random import randint 
# the room class
# note that this class is fully implemented with dictionaries as illustrated in the lesson "More on Data Structures"
class Room(object):
        # the constructor
        def __init__(self, name):
                # rooms have a name, an image (the name of a file), exits (e.g., south), exit locations
                # (e.g., to the south is room n), items (e.g., table), item descriptions (for each item),
                # and grabbables (things that can be taken into inventory)
                self.name = name
       
                self.exits = {}
                self.items = {}
                self.grabbables = []

        # getters and setters for the instance variables
        @property
        def name(self):
                return self._name

        @name.setter
        def name(self, value):
                self._name = value

        @property
        def exits(self):
                return self._exits

        @exits.setter
        def exits(self, value):
                self._exits = value

        @property
        def items(self):
                return self._items

        @items.setter
        def items(self, value):
                self._items = value

        @property
        def grabbables(self):
                return self._grabbables

        @grabbables.setter
        def grabbables(self, value):
                self._grabbables = value

        # adds an exit to the room
        # the exit is a string (e.g., north)
        # the room is an instance of a room
        def addExit(self, exit, room):
                # append the exit and room to the appropriate dictionary
                self._exits[exit] = room

        # adds an item to the room
        # the item is a string (e.g., table)
        # the desc is a string that describes the item (e.g., it is made of wood)
        def addItem(self, item, desc):
                # append the item and description to the appropriate dictionary
                self._items[item] = desc

        # adds a grabbable item to the room
        # the item is a string (e.g., key)
        def addGrabbable(self, item):
                # append the item to the list
                self._grabbables.append(item)

        # removes a grabbable item from the room
        # the item is a string (e.g., key)
        def delGrabbable(self, item):
                # remove the item from the list
                self._grabbables.remove(item)

    # returns a string description of the room
        def __str__(self):
                # first, the room name
                s = "{}\n".format(self.name)
                global NAME
                NAME  = self.name
                # this is for the take Verb {progress}.
                # next, the items in the room
                for item in self.items.keys():
                        s += item + " "
                s += "\n"
                # next, the exits from the room
                return s

# the game class
# inherits from the Frame class of Tkinter
class Game(Frame):
        # the constructor
        def __init__(self, parent):
                # call the constructor in the superclass
                Frame.__init__(self, parent)

        # creates the rooms
        def createRooms(self):
                # r1 through r4 are the four rooms in the mansion
                # currentRoom is the room the player is currently in (which
                # can be one of r1 through r4)

                # create the rooms and give them meaningful names
                # image in the current directory
                r1 = Room("Story 1")
                r2 = Room("Story 2")
                r3 = Room("Story 3")
                r4 = Room("Story 4")
                r5 = Room("Observatory")
                # the __init__ was asking for an imagine 
                
                # add exits to room 1
                r1.addExit("down", r2)
                # add grabbables to room 1
                r1.addGrabbable("a1")
                r1.addGrabbable("b1")
                r1.addGrabbable("c1")
                # add items to room 1
                r1.addItem("a1", "Good option")
                r1.addItem("b1", "Neutral option")
                r1.addItem("c1", "Bad option")

                R2 = randint(1,2)
                r2.addExit("down", r3)
                if R2 == 1 :
                        r2.addGrabbable("a2.1")
                        r2.addGrabbable("b2.1")
                        r2.addGrabbable("c2.1")
                        r2.addItem("a2.1", "Good option")
                        r2.addItem("b2.1", "Neutral option")
                        r2.addItem("c2.1", "Bad option")
                if R2 == 2: 
                        r2.addGrabbable("a2.2")
                        r2.addGrabbable("b2.2")
                        r2.addGrabbable("c2.2")
                        r2.addItem("a2.2", "Good option")
                        r2.addItem("b2.2", "Neutral option")
                        r2.addItem("c2.2", "Bad option")

                R3 = randint(1,2)
                r3.addExit("down", r4)
                if R3 == 1 :
                        r3.addGrabbable("a3.1")
                        r3.addGrabbable("b3.1")
                        r3.addGrabbable("c3.1")
                        r3.addItem("a3.1", "Good option")
                        r3.addItem("b3.1", "Neutral option")
                        r3.addItem("c3.1", "Bad option")
                if R3 == 2: 
                        r3.addGrabbable("a3.2")
                        r3.addGrabbable("b3.2")
                        r3.addGrabbable("c3.2")
                        r3.addItem("a3.2", "Good option")
                        r3.addItem("b3.2", "Neutral option")
                        r3.addItem("c3.2", "Bad option")

                R4 = randint(1,2)
                r4.addExit("down", r5)
                if R4 == 1 :
                        r4.addGrabbable("a4.1")
                        r4.addGrabbable("b4.1")
                        r4.addGrabbable("c4.1")
                        r4.addItem("a4.1", "Good option")
                        r4.addItem("b4.1", "Neutral option")
                        r4.addItem("c4.1", "Bad option")
                if R4 == 2: 
                        r4.addGrabbable("a4.2")
                        r4.addGrabbable("b4.2")
                        r4.addGrabbable("c4.2")
                        r4.addItem("a4.2", "Good option")
                        r4.addItem("b4.2", "Neutral option")
                        r4.addItem("c4.2", "Bad option")

                R5 = randint(1,2)              
                if R5 == 1 :
                        r5.addGrabbable("a5.1")
                        r5.addGrabbable("b5.1")
                        r5.addGrabbable("c5.1")
                        r5.addItem("a5.1", "Good option")
                        r5.addItem("b5.1", "Neutral option")
                        r5.addItem("c5.1", "Bad option")
                if R5 == 2: 
                        r5.addGrabbable("a5.2")
                        r5.addGrabbable("b5.2")
                        r5.addGrabbable("c5.2")
                        r5.addItem("a5.2", "Good option")
                        r5.addItem("b5.2", "Neutral option")
                        r5.addItem("c5.2", "Bad option")


             
                # set room 1 as the current room at the beginning of the
                # game
                Game.currentRoom = r1

                #initialize the player's inventory
                Game.inventory = []

                

        # sets up the GUI
        def setupGUI(self):
        # organize the GUI
                self.pack(fill=BOTH, expand=1)
        # the widget is a Tkinter Entry
# set its background to white and bind the return key to the
# function process in the class
# push it to the bottom of the GUI and let it fill
# horizontally
# give it focus so the player doesn't have to click on it
                Game.player_input = Entry(bg="white")
                Game.player_input.bind("<Return>", self.process)
                Game.player_input.pack(side=BOTTOM, fill=X)
        #Game.player_input.focus()
# setup the image to the left of the GUI
# the widget is a Tkinter Label
# don't let the image control the widget's size
        
        # setup the text to the right of the GUI
# first, the frame in which the text will be placed
                text_frame = Frame(self, width=WIDTH )
# the widget is a Tkinter Text
# disable it by default
# don't let the widget control the frame's size
                Game.text = Text(bg="lightgrey", state=DISABLED)
                Game.text.pack(fill=Y, expand=1)
                text_frame.pack(side=TOP, fill=X)
                text_frame.pack_propagate(False)

        # sets the status displayed on the right of the GUI
        def setStatus(self, status):
                # enable the text widget, clear it, set it, and disabled it
                Game.text.config(state=NORMAL)
                Game.text.delete("1.0", END)
                
                # otherwise, display the appropriate status
                Game.text.insert(END,"Your story far : " + str(Game.inventory)+ "\n" +status +"\n" + str(Game.currentRoom) )
                Game.text.config(state=DISABLED)
        # plays the game
        def play(self):
                # add the rooms to the game
                self.createRooms()
                # configure the GUI
                self.setupGUI()
                # set the current room
                #self.setRoomImage()
                # set the current status
                self.setStatus("")

        # processes the player's input
        def process(self, event):
                # grab the player's input from the input at the bottom of
                # the GUI
                action = Game.player_input.get()
                # set the user's input to lowercase to make it easier to
                # compare the verb and noun to known values
                action = action.lower()
                # set a default response
                response = "I don't understand.  Try verb noun.  Valid verbs are go, look, and take"

                # exit the game if the player wants to leave (supports quit,
                # exit, and bye)
                if (action == "quit" or action == "exit" or action == "bye" or action == "sionara!"):
                        exit(0)

                # if the player is dead if goes/went south from room 4
                if (Game.currentRoom == None):
                        # clear the player's input
                        Game.player_input.delete(0, END)
                        return

                # split the user input into words (words are separated by
                # spaces) and store the words in a list
                words = action.split()

                # the game only understands two word inputs
                if (len(words) == 2):
                        # isolate the verb and noun
                        verb = words[0]
                        noun = words[1]

                        # the verb is: go
                        if (verb == "progress"):
                                # set a default response
                                response = "Invalid"

                                for grabbable in Game.currentRoom.grabbables:
                                        # a valid grabbable item is found
                                        if (noun == grabbable):
                                                # add the grabbable item to the player's
                                              # inventory
                                              Game.inventory.append(NAME)
                                              Game.inventory.append(grabbable)
                                             
                                              # remove the grabbable item from the
                                              # room
                                              Game.currentRoom.delGrabbable(grabbable)
                                              # set the response (success)
                                              response = "Story option chosen"
                                              # no need to check any more grabbable
                                              # items
                                              noun = "down"

                                # check for valid exits in the current room
                                if (noun in Game.currentRoom.exits):
                                # if one is found, change the current room to
                                # the one that is associated with the
                                # specified exit
                                        Game.currentRoom = Game.currentRoom.exits[noun]
                                # set the response (success)
                                response = "Progressed"
                                

                                        
                # display the response on the right of the GUI
                # display the room's image on the left of the GUI
                # clear the player's input
                self.setStatus(response)
                Game.player_input.delete(0, END)
                

                
                
                

                        

##########################################################
# the default size of the GUI is 800x600
WIDTH = 800
HEIGHT = 600

# create the window
window = Tk()
window.title("Room Adventure")

# create the GUI as a Tkinter canvas inside the window
g = Game(window)
# play the game
g.play()

# wait for the window to close
window.mainloop()
